{"ast":null,"code":"var _jsxFileName = \"/home/gaian/Desktop/Mine/github/1606Github/react-quotes/src/Quotes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport allQuotes from './Quotes.json';\nimport './Quotes.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quotes() {\n  _s();\n\n  const [quote, setquote] = useState('Strive not to be a success, but rather to be of value.');\n  const [author, setauthor] = useState('Albert Einstein');\n\n  const generateQuote = () => {\n    const randomNumber = Math.floor(Math.random() * 100) + 1;\n    console.log(randomNumber);\n    let newQuote = allQuotes.quotes[randomNumber].quote;\n    let author = allQuotes.quotes[randomNumber].author;\n    setauthor(author);\n    setquote(newQuote);\n  };\n\n  const backgroundColor = {\n    background: \"#000\",\n    color: 'white'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quotesLayer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: backgroundColor,\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"quoteStyle\",\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"author\",\n        children: [\"Author - \", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-sm quoteBtn\",\n        onClick: generateQuote,\n        children: \"New Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quotes, \"Dx8Zf16jQq/idR4DDAwG5xKGGcY=\");\n\n_c = Quotes;\nexport default Quotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quotes\");","map":{"version":3,"sources":["/home/gaian/Desktop/Mine/github/1606Github/react-quotes/src/Quotes.js"],"names":["React","useState","allQuotes","Quotes","quote","setquote","author","setauthor","generateQuote","randomNumber","Math","floor","random","console","log","newQuote","quotes","backgroundColor","background","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAO,cAAP;;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAEd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,wDAAD,CAAlC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,iBAAD,CAApC;;AAEA,QAAMO,aAAa,GAAG,MAAM;AACxB,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC,CAAvD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AACA,QAAIM,QAAQ,GAAGb,SAAS,CAACc,MAAV,CAAiBP,YAAjB,EAA+BL,KAA9C;AACA,QAAIE,MAAM,GAAGJ,SAAS,CAACc,MAAV,CAAiBP,YAAjB,EAA+BH,MAA5C;AACAC,IAAAA,SAAS,CAACD,MAAD,CAAT;AACAD,IAAAA,QAAQ,CAACU,QAAD,CAAR;AACH,GAPD;;AASA,QAAME,eAAe,GAAG;AACpBC,IAAAA,UAAU,EAAE,MADQ;AAEpBC,IAAAA,KAAK,EAAE;AAFa,GAAxB;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACI;AAAK,MAAA,KAAK,EAAEF,eAAZ;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA,kBAA4Bb;AAA5B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,QAAb;AAAA,gCAAgCE,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAwC,QAAA,OAAO,EAAEE,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GA5BQL,M;;KAAAA,M;AA8BT,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport allQuotes from './Quotes.json';\nimport './Quotes.css'\n\nfunction Quotes() {\n\n    const [quote, setquote] = useState('Strive not to be a success, but rather to be of value.')\n    const [author, setauthor] = useState('Albert Einstein');\n\n    const generateQuote = () => {\n        const randomNumber = Math.floor(Math.random() * 100) + 1\n        console.log(randomNumber)\n        let newQuote = allQuotes.quotes[randomNumber].quote;\n        let author = allQuotes.quotes[randomNumber].author;\n        setauthor(author);\n        setquote(newQuote);\n    }\n\n    const backgroundColor = {\n        background: \"#000\",\n        color: 'white'\n    }\n\n    return (\n        <div className=\"quotesLayer\">\n            <div style={backgroundColor}>\n                <h4 className=\"quoteStyle\">{quote}</h4>\n                <p className=\"author\">Author - {author}</p>\n                <button className=\"btn btn-sm quoteBtn\" onClick={generateQuote}>New Quote</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Quotes\n"]},"metadata":{},"sourceType":"module"}